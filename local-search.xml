<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue 基础知识总结</title>
    <link href="/2020/05/23/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2020/05/23/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h6 id="一、常用指令"><a href="#一、常用指令" class="headerlink" title="一、常用指令"></a>一、常用指令</h6><ul><li>v-on 绑定一个事件 缩写 @ 在methods类方法里面操作绑定的方法</li><li>v-bind 绑定一个属性 缩写 : 在data数据对象里面操作绑定的数据</li><li>v-model 双向绑定通常用于获取input框输入的内容，无论那边更改都会同步值</li><li>v-for 基于数组或对象来循环渲染一个列表，语法：<br>1.循环数组，index是数组的索引 <pre><code class="hljs javascript">v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"(item,index) in items"</span> :key=<span class="hljs-string">"index"</span></code></pre> 2.循环对象，name是对象的键值  <pre><code class="hljs javascript">v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"(value, name, index) in object"</span> :key=<span class="hljs-string">"index"</span></code></pre> 3.为什么使用v-for时必须添加唯一的key?<pre><code>使用v-for更新已渲染的元素列表时，默认用就地复用策略;列表数据修改的时候，他会根据key值去判断某个值是否修改，如果修改，则重新渲染这一项，否则复用之前的元素</code></pre></li><li>v-if v-else v-else-if 动态添加或删除元素</li><li>v-show 添加元素的display样式控制显示或隐藏</li><li>v-html 输出html代码</li></ul><h6 id="二、常用属性"><a href="#二、常用属性" class="headerlink" title="二、常用属性"></a>二、常用属性</h6><table><thead><tr><th align="left">属性写法</th><th align="left">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">data: {}</td><td align="left">数据属性</td><td align="left">用来存放需要绑定的数据</td></tr><tr><td align="left">methods: {}</td><td align="left">事件操作属性</td><td align="left">用来放定义的事件方法</td></tr><tr><td align="left">components: {}</td><td align="left">组件属性</td><td align="left">自定义组件声明</td></tr><tr><td align="left">props: {}</td><td align="left">获取父组件数据</td><td align="left">单向绑定</td></tr><tr><td align="left">computed: {}</td><td align="left">计算属性</td><td align="left">提供相对简单的数据计算</td></tr><tr><td align="left">watch: {}</td><td align="left">侦听器</td><td align="left">观察某一特定question的值</td></tr><tr><td align="left">directives: {}</td><td align="left">自定义指令属性</td><td align="left">注册内部自定义指令</td></tr><tr><td align="left">filters: {}</td><td align="left">过滤器</td><td align="left">自定义过滤器</td></tr><tr><td align="left">…</td><td align="left"></td><td align="left"></td></tr></tbody></table><h6 id="三、文件结构"><a href="#三、文件结构" class="headerlink" title="三、文件结构"></a>三、文件结构</h6> <pre><code class="hljs javascript">&lt;template&gt;  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"example"</span>&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>template&gt;&lt;script&gt;<span class="hljs-keyword">import</span> otherComponent <span class="hljs-keyword">from</span> <span class="hljs-string">'./OtherComponent.vue'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    <span class="hljs-comment">// 常用属性</span>    components: &#123;      <span class="hljs-comment">// 组件注册</span>      otherComponent    &#125;,    data () &#123;       <span class="hljs-keyword">return</span> &#123;        <span class="hljs-comment">// 自定义数据</span>        msg: <span class="hljs-string">'Hello world!'</span>      &#125;    &#125;,        create () &#123;      <span class="hljs-comment">// 初始化</span>    &#125;,    mounted () &#123;      <span class="hljs-comment">// 挂载</span>      <span class="hljs-keyword">this</span>.getData()    &#125;,    methods: &#123;      <span class="hljs-comment">// 自定义方法</span>      getData()&#123;          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'success'</span>)      &#125;    &#125;&#125;&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">&lt;style&gt;</span><span class="hljs-regexp">  .example &#123;</span><span class="hljs-regexp">    color: red;</span><span class="hljs-regexp">  &#125;</span><span class="hljs-regexp">&lt;/</span>style&gt;</code></pre><h6 id="四、生命周期"><a href="#四、生命周期" class="headerlink" title="四、生命周期"></a>四、生命周期</h6><p><img src="https://cn.vuejs.org/images/lifecycle.png" srcset="/img/loading.gif" alt="avatar"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/22/hello-world/"/>
    <url>/2020/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
